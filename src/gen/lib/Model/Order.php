<?php
/**
 * Order
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Apideck\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Apideck
 *
 * The Apideck OpenAPI Spec: SDK Optimized
 *
 * The version of the OpenAPI document: 8.26.1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Apideck\Client\Model;

use \ArrayAccess;
use \Apideck\Client\ObjectSerializer;

/**
 * Order Class Doc Comment
 *
 * @category Class
 * @package  Apideck\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Order implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Order';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'merchant_id' => 'string',
        'location_id' => 'string',
        'id' => 'string',
        'order_number' => 'string',
        'order_date' => '\DateTime',
        'closed_date' => '\DateTime',
        'reference_id' => 'string',
        'status' => 'string',
        'state' => 'string',
        'payment_status' => 'string',
        'currency' => 'string',
        'title' => 'string',
        'note' => 'string',
        'customer_id' => 'string',
        'employee_id' => 'string',
        'order_type_id' => 'string',
        'table' => 'string',
        'seat' => 'string',
        'total_amount' => 'float',
        'total_tip' => 'float',
        'total_tax' => 'float',
        'total_discount' => 'float',
        'total_refund' => 'float',
        'total_service_charge' => 'float',
        'refunded' => 'bool',
        'customers' => '\Apideck\Client\Model\OrderCustomers[]',
        'fulfillments' => '\Apideck\Client\Model\OrderFulfillments[]',
        'line_items' => '\Apideck\Client\Model\OrderLineItems[]',
        'payments' => '\Apideck\Client\Model\OrderPayments[]',
        'service_charges' => 'object[]',
        'refunds' => '\Apideck\Client\Model\OrderRefunds[]',
        'taxes' => 'object[]',
        'discounts' => '\Apideck\Client\Model\OrderDiscounts[]',
        'tenders' => '\Apideck\Client\Model\OrderTenders[]',
        'source' => 'string',
        'voided' => 'bool',
        'voided_at' => '\DateTime',
        'version' => 'string',
        'updated_by' => '\Apideck\Client\Model\Version',
        'created_by' => '\Apideck\Client\Model\CreatedBy',
        'updated_at' => '\Apideck\Client\Model\UpdatedAt',
        'created_at' => '\Apideck\Client\Model\CreatedAt'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'merchant_id' => null,
        'location_id' => null,
        'id' => null,
        'order_number' => null,
        'order_date' => 'date',
        'closed_date' => 'date',
        'reference_id' => null,
        'status' => null,
        'state' => null,
        'payment_status' => null,
        'currency' => null,
        'title' => null,
        'note' => null,
        'customer_id' => null,
        'employee_id' => null,
        'order_type_id' => null,
        'table' => null,
        'seat' => null,
        'total_amount' => null,
        'total_tip' => null,
        'total_tax' => null,
        'total_discount' => null,
        'total_refund' => null,
        'total_service_charge' => null,
        'refunded' => null,
        'customers' => null,
        'fulfillments' => null,
        'line_items' => null,
        'payments' => null,
        'service_charges' => null,
        'refunds' => null,
        'taxes' => null,
        'discounts' => null,
        'tenders' => null,
        'source' => null,
        'voided' => null,
        'voided_at' => 'date-time',
        'version' => null,
        'updated_by' => null,
        'created_by' => null,
        'updated_at' => null,
        'created_at' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'merchant_id' => 'merchant_id',
        'location_id' => 'location_id',
        'id' => 'id',
        'order_number' => 'order_number',
        'order_date' => 'order_date',
        'closed_date' => 'closed_date',
        'reference_id' => 'reference_id',
        'status' => 'status',
        'state' => 'state',
        'payment_status' => 'payment_status',
        'currency' => 'currency',
        'title' => 'title',
        'note' => 'note',
        'customer_id' => 'customer_id',
        'employee_id' => 'employee_id',
        'order_type_id' => 'order_type_id',
        'table' => 'table',
        'seat' => 'seat',
        'total_amount' => 'total_amount',
        'total_tip' => 'total_tip',
        'total_tax' => 'total_tax',
        'total_discount' => 'total_discount',
        'total_refund' => 'total_refund',
        'total_service_charge' => 'total_service_charge',
        'refunded' => 'refunded',
        'customers' => 'customers',
        'fulfillments' => 'fulfillments',
        'line_items' => 'line_items',
        'payments' => 'payments',
        'service_charges' => 'service_charges',
        'refunds' => 'refunds',
        'taxes' => 'taxes',
        'discounts' => 'discounts',
        'tenders' => 'tenders',
        'source' => 'source',
        'voided' => 'voided',
        'voided_at' => 'voided_at',
        'version' => 'version',
        'updated_by' => 'updated_by',
        'created_by' => 'created_by',
        'updated_at' => 'updated_at',
        'created_at' => 'created_at'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'merchant_id' => 'setMerchantId',
        'location_id' => 'setLocationId',
        'id' => 'setId',
        'order_number' => 'setOrderNumber',
        'order_date' => 'setOrderDate',
        'closed_date' => 'setClosedDate',
        'reference_id' => 'setReferenceId',
        'status' => 'setStatus',
        'state' => 'setState',
        'payment_status' => 'setPaymentStatus',
        'currency' => 'setCurrency',
        'title' => 'setTitle',
        'note' => 'setNote',
        'customer_id' => 'setCustomerId',
        'employee_id' => 'setEmployeeId',
        'order_type_id' => 'setOrderTypeId',
        'table' => 'setTable',
        'seat' => 'setSeat',
        'total_amount' => 'setTotalAmount',
        'total_tip' => 'setTotalTip',
        'total_tax' => 'setTotalTax',
        'total_discount' => 'setTotalDiscount',
        'total_refund' => 'setTotalRefund',
        'total_service_charge' => 'setTotalServiceCharge',
        'refunded' => 'setRefunded',
        'customers' => 'setCustomers',
        'fulfillments' => 'setFulfillments',
        'line_items' => 'setLineItems',
        'payments' => 'setPayments',
        'service_charges' => 'setServiceCharges',
        'refunds' => 'setRefunds',
        'taxes' => 'setTaxes',
        'discounts' => 'setDiscounts',
        'tenders' => 'setTenders',
        'source' => 'setSource',
        'voided' => 'setVoided',
        'voided_at' => 'setVoidedAt',
        'version' => 'setVersion',
        'updated_by' => 'setUpdatedBy',
        'created_by' => 'setCreatedBy',
        'updated_at' => 'setUpdatedAt',
        'created_at' => 'setCreatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'merchant_id' => 'getMerchantId',
        'location_id' => 'getLocationId',
        'id' => 'getId',
        'order_number' => 'getOrderNumber',
        'order_date' => 'getOrderDate',
        'closed_date' => 'getClosedDate',
        'reference_id' => 'getReferenceId',
        'status' => 'getStatus',
        'state' => 'getState',
        'payment_status' => 'getPaymentStatus',
        'currency' => 'getCurrency',
        'title' => 'getTitle',
        'note' => 'getNote',
        'customer_id' => 'getCustomerId',
        'employee_id' => 'getEmployeeId',
        'order_type_id' => 'getOrderTypeId',
        'table' => 'getTable',
        'seat' => 'getSeat',
        'total_amount' => 'getTotalAmount',
        'total_tip' => 'getTotalTip',
        'total_tax' => 'getTotalTax',
        'total_discount' => 'getTotalDiscount',
        'total_refund' => 'getTotalRefund',
        'total_service_charge' => 'getTotalServiceCharge',
        'refunded' => 'getRefunded',
        'customers' => 'getCustomers',
        'fulfillments' => 'getFulfillments',
        'line_items' => 'getLineItems',
        'payments' => 'getPayments',
        'service_charges' => 'getServiceCharges',
        'refunds' => 'getRefunds',
        'taxes' => 'getTaxes',
        'discounts' => 'getDiscounts',
        'tenders' => 'getTenders',
        'source' => 'getSource',
        'voided' => 'getVoided',
        'voided_at' => 'getVoidedAt',
        'version' => 'getVersion',
        'updated_by' => 'getUpdatedBy',
        'created_by' => 'getCreatedBy',
        'updated_at' => 'getUpdatedAt',
        'created_at' => 'getCreatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const STATUS_OPEN = 'open';
    const STATUS_DRAFT = 'draft';
    const STATUS_DELIVERED = 'delivered';
    const STATUS_DELAYED = 'delayed';
    const STATUS_VOIDED = 'voided';
    const STATUS_COMPLETED = 'completed';
    const PAYMENT_STATUS_OPEN = 'open';
    const PAYMENT_STATUS_PAID = 'paid';
    const PAYMENT_STATUS_REFUNDED = 'refunded';
    const PAYMENT_STATUS_CREDITED = 'credited';
    const PAYMENT_STATUS_PARTIALLY_PAID = 'partially_paid';
    const PAYMENT_STATUS_PARTIALLY_REFUNDED = 'partially_refunded';
    const PAYMENT_STATUS_UNKNOWN = 'unknown';
    const CURRENCY_UNKNOWN_CURRENCY = 'UNKNOWN_CURRENCY';
    const CURRENCY_AED = 'AED';
    const CURRENCY_AFN = 'AFN';
    const CURRENCY_ALL = 'ALL';
    const CURRENCY_AMD = 'AMD';
    const CURRENCY_ANG = 'ANG';
    const CURRENCY_AOA = 'AOA';
    const CURRENCY_ARS = 'ARS';
    const CURRENCY_AUD = 'AUD';
    const CURRENCY_AWG = 'AWG';
    const CURRENCY_AZN = 'AZN';
    const CURRENCY_BAM = 'BAM';
    const CURRENCY_BBD = 'BBD';
    const CURRENCY_BDT = 'BDT';
    const CURRENCY_BGN = 'BGN';
    const CURRENCY_BHD = 'BHD';
    const CURRENCY_BIF = 'BIF';
    const CURRENCY_BMD = 'BMD';
    const CURRENCY_BND = 'BND';
    const CURRENCY_BOB = 'BOB';
    const CURRENCY_BOV = 'BOV';
    const CURRENCY_BRL = 'BRL';
    const CURRENCY_BSD = 'BSD';
    const CURRENCY_BTN = 'BTN';
    const CURRENCY_BWP = 'BWP';
    const CURRENCY_BYR = 'BYR';
    const CURRENCY_BZD = 'BZD';
    const CURRENCY_CAD = 'CAD';
    const CURRENCY_CDF = 'CDF';
    const CURRENCY_CHE = 'CHE';
    const CURRENCY_CHF = 'CHF';
    const CURRENCY_CHW = 'CHW';
    const CURRENCY_CLF = 'CLF';
    const CURRENCY_CLP = 'CLP';
    const CURRENCY_CNY = 'CNY';
    const CURRENCY_COP = 'COP';
    const CURRENCY_COU = 'COU';
    const CURRENCY_CRC = 'CRC';
    const CURRENCY_CUC = 'CUC';
    const CURRENCY_CUP = 'CUP';
    const CURRENCY_CVE = 'CVE';
    const CURRENCY_CZK = 'CZK';
    const CURRENCY_DJF = 'DJF';
    const CURRENCY_DKK = 'DKK';
    const CURRENCY_DOP = 'DOP';
    const CURRENCY_DZD = 'DZD';
    const CURRENCY_EGP = 'EGP';
    const CURRENCY_ERN = 'ERN';
    const CURRENCY_ETB = 'ETB';
    const CURRENCY_EUR = 'EUR';
    const CURRENCY_FJD = 'FJD';
    const CURRENCY_FKP = 'FKP';
    const CURRENCY_GBP = 'GBP';
    const CURRENCY_GEL = 'GEL';
    const CURRENCY_GHS = 'GHS';
    const CURRENCY_GIP = 'GIP';
    const CURRENCY_GMD = 'GMD';
    const CURRENCY_GNF = 'GNF';
    const CURRENCY_GTQ = 'GTQ';
    const CURRENCY_GYD = 'GYD';
    const CURRENCY_HKD = 'HKD';
    const CURRENCY_HNL = 'HNL';
    const CURRENCY_HRK = 'HRK';
    const CURRENCY_HTG = 'HTG';
    const CURRENCY_HUF = 'HUF';
    const CURRENCY_IDR = 'IDR';
    const CURRENCY_ILS = 'ILS';
    const CURRENCY_INR = 'INR';
    const CURRENCY_IQD = 'IQD';
    const CURRENCY_IRR = 'IRR';
    const CURRENCY_ISK = 'ISK';
    const CURRENCY_JMD = 'JMD';
    const CURRENCY_JOD = 'JOD';
    const CURRENCY_JPY = 'JPY';
    const CURRENCY_KES = 'KES';
    const CURRENCY_KGS = 'KGS';
    const CURRENCY_KHR = 'KHR';
    const CURRENCY_KMF = 'KMF';
    const CURRENCY_KPW = 'KPW';
    const CURRENCY_KRW = 'KRW';
    const CURRENCY_KWD = 'KWD';
    const CURRENCY_KYD = 'KYD';
    const CURRENCY_KZT = 'KZT';
    const CURRENCY_LAK = 'LAK';
    const CURRENCY_LBP = 'LBP';
    const CURRENCY_LKR = 'LKR';
    const CURRENCY_LRD = 'LRD';
    const CURRENCY_LSL = 'LSL';
    const CURRENCY_LTL = 'LTL';
    const CURRENCY_LVL = 'LVL';
    const CURRENCY_LYD = 'LYD';
    const CURRENCY_MAD = 'MAD';
    const CURRENCY_MDL = 'MDL';
    const CURRENCY_MGA = 'MGA';
    const CURRENCY_MKD = 'MKD';
    const CURRENCY_MMK = 'MMK';
    const CURRENCY_MNT = 'MNT';
    const CURRENCY_MOP = 'MOP';
    const CURRENCY_MRO = 'MRO';
    const CURRENCY_MUR = 'MUR';
    const CURRENCY_MVR = 'MVR';
    const CURRENCY_MWK = 'MWK';
    const CURRENCY_MXN = 'MXN';
    const CURRENCY_MXV = 'MXV';
    const CURRENCY_MYR = 'MYR';
    const CURRENCY_MZN = 'MZN';
    const CURRENCY_NAD = 'NAD';
    const CURRENCY_NGN = 'NGN';
    const CURRENCY_NIO = 'NIO';
    const CURRENCY_NOK = 'NOK';
    const CURRENCY_NPR = 'NPR';
    const CURRENCY_NZD = 'NZD';
    const CURRENCY_OMR = 'OMR';
    const CURRENCY_PAB = 'PAB';
    const CURRENCY_PEN = 'PEN';
    const CURRENCY_PGK = 'PGK';
    const CURRENCY_PHP = 'PHP';
    const CURRENCY_PKR = 'PKR';
    const CURRENCY_PLN = 'PLN';
    const CURRENCY_PYG = 'PYG';
    const CURRENCY_QAR = 'QAR';
    const CURRENCY_RON = 'RON';
    const CURRENCY_RSD = 'RSD';
    const CURRENCY_RUB = 'RUB';
    const CURRENCY_RWF = 'RWF';
    const CURRENCY_SAR = 'SAR';
    const CURRENCY_SBD = 'SBD';
    const CURRENCY_SCR = 'SCR';
    const CURRENCY_SDG = 'SDG';
    const CURRENCY_SEK = 'SEK';
    const CURRENCY_SGD = 'SGD';
    const CURRENCY_SHP = 'SHP';
    const CURRENCY_SLL = 'SLL';
    const CURRENCY_SOS = 'SOS';
    const CURRENCY_SRD = 'SRD';
    const CURRENCY_SSP = 'SSP';
    const CURRENCY_STD = 'STD';
    const CURRENCY_SVC = 'SVC';
    const CURRENCY_SYP = 'SYP';
    const CURRENCY_SZL = 'SZL';
    const CURRENCY_THB = 'THB';
    const CURRENCY_TJS = 'TJS';
    const CURRENCY_TMT = 'TMT';
    const CURRENCY_TND = 'TND';
    const CURRENCY_TOP = 'TOP';
    const CURRENCY_TRC = 'TRC';
    const CURRENCY__TRY = 'TRY';
    const CURRENCY_TTD = 'TTD';
    const CURRENCY_TWD = 'TWD';
    const CURRENCY_TZS = 'TZS';
    const CURRENCY_UAH = 'UAH';
    const CURRENCY_UGX = 'UGX';
    const CURRENCY_USD = 'USD';
    const CURRENCY_USN = 'USN';
    const CURRENCY_USS = 'USS';
    const CURRENCY_UYI = 'UYI';
    const CURRENCY_UYU = 'UYU';
    const CURRENCY_UZS = 'UZS';
    const CURRENCY_VEF = 'VEF';
    const CURRENCY_VND = 'VND';
    const CURRENCY_VUV = 'VUV';
    const CURRENCY_WST = 'WST';
    const CURRENCY_XAF = 'XAF';
    const CURRENCY_XAG = 'XAG';
    const CURRENCY_XAU = 'XAU';
    const CURRENCY_XBA = 'XBA';
    const CURRENCY_XBB = 'XBB';
    const CURRENCY_XBC = 'XBC';
    const CURRENCY_XBD = 'XBD';
    const CURRENCY_XCD = 'XCD';
    const CURRENCY_XDR = 'XDR';
    const CURRENCY_XOF = 'XOF';
    const CURRENCY_XPD = 'XPD';
    const CURRENCY_XPF = 'XPF';
    const CURRENCY_XPT = 'XPT';
    const CURRENCY_XTS = 'XTS';
    const CURRENCY_XXX = 'XXX';
    const CURRENCY_YER = 'YER';
    const CURRENCY_ZAR = 'ZAR';
    const CURRENCY_ZMK = 'ZMK';
    const CURRENCY_ZMW = 'ZMW';
    const CURRENCY_BTC = 'BTC';
    const SOURCE_IN_STORE = 'in-store';
    const SOURCE_ONLINE = 'online';
    const SOURCE_OPT = 'opt';
    const SOURCE_API = 'api';
    const SOURCE_KIOSK = 'kiosk';
    const SOURCE_CALLER_ID = 'caller-id';
    const SOURCE_GOOGLE = 'google';
    const SOURCE_INVOICE = 'invoice';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_OPEN,
            self::STATUS_DRAFT,
            self::STATUS_DELIVERED,
            self::STATUS_DELAYED,
            self::STATUS_VOIDED,
            self::STATUS_COMPLETED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentStatusAllowableValues()
    {
        return [
            self::PAYMENT_STATUS_OPEN,
            self::PAYMENT_STATUS_PAID,
            self::PAYMENT_STATUS_REFUNDED,
            self::PAYMENT_STATUS_CREDITED,
            self::PAYMENT_STATUS_PARTIALLY_PAID,
            self::PAYMENT_STATUS_PARTIALLY_REFUNDED,
            self::PAYMENT_STATUS_UNKNOWN,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCurrencyAllowableValues()
    {
        return [
            self::CURRENCY_UNKNOWN_CURRENCY,
            self::CURRENCY_AED,
            self::CURRENCY_AFN,
            self::CURRENCY_ALL,
            self::CURRENCY_AMD,
            self::CURRENCY_ANG,
            self::CURRENCY_AOA,
            self::CURRENCY_ARS,
            self::CURRENCY_AUD,
            self::CURRENCY_AWG,
            self::CURRENCY_AZN,
            self::CURRENCY_BAM,
            self::CURRENCY_BBD,
            self::CURRENCY_BDT,
            self::CURRENCY_BGN,
            self::CURRENCY_BHD,
            self::CURRENCY_BIF,
            self::CURRENCY_BMD,
            self::CURRENCY_BND,
            self::CURRENCY_BOB,
            self::CURRENCY_BOV,
            self::CURRENCY_BRL,
            self::CURRENCY_BSD,
            self::CURRENCY_BTN,
            self::CURRENCY_BWP,
            self::CURRENCY_BYR,
            self::CURRENCY_BZD,
            self::CURRENCY_CAD,
            self::CURRENCY_CDF,
            self::CURRENCY_CHE,
            self::CURRENCY_CHF,
            self::CURRENCY_CHW,
            self::CURRENCY_CLF,
            self::CURRENCY_CLP,
            self::CURRENCY_CNY,
            self::CURRENCY_COP,
            self::CURRENCY_COU,
            self::CURRENCY_CRC,
            self::CURRENCY_CUC,
            self::CURRENCY_CUP,
            self::CURRENCY_CVE,
            self::CURRENCY_CZK,
            self::CURRENCY_DJF,
            self::CURRENCY_DKK,
            self::CURRENCY_DOP,
            self::CURRENCY_DZD,
            self::CURRENCY_EGP,
            self::CURRENCY_ERN,
            self::CURRENCY_ETB,
            self::CURRENCY_EUR,
            self::CURRENCY_FJD,
            self::CURRENCY_FKP,
            self::CURRENCY_GBP,
            self::CURRENCY_GEL,
            self::CURRENCY_GHS,
            self::CURRENCY_GIP,
            self::CURRENCY_GMD,
            self::CURRENCY_GNF,
            self::CURRENCY_GTQ,
            self::CURRENCY_GYD,
            self::CURRENCY_HKD,
            self::CURRENCY_HNL,
            self::CURRENCY_HRK,
            self::CURRENCY_HTG,
            self::CURRENCY_HUF,
            self::CURRENCY_IDR,
            self::CURRENCY_ILS,
            self::CURRENCY_INR,
            self::CURRENCY_IQD,
            self::CURRENCY_IRR,
            self::CURRENCY_ISK,
            self::CURRENCY_JMD,
            self::CURRENCY_JOD,
            self::CURRENCY_JPY,
            self::CURRENCY_KES,
            self::CURRENCY_KGS,
            self::CURRENCY_KHR,
            self::CURRENCY_KMF,
            self::CURRENCY_KPW,
            self::CURRENCY_KRW,
            self::CURRENCY_KWD,
            self::CURRENCY_KYD,
            self::CURRENCY_KZT,
            self::CURRENCY_LAK,
            self::CURRENCY_LBP,
            self::CURRENCY_LKR,
            self::CURRENCY_LRD,
            self::CURRENCY_LSL,
            self::CURRENCY_LTL,
            self::CURRENCY_LVL,
            self::CURRENCY_LYD,
            self::CURRENCY_MAD,
            self::CURRENCY_MDL,
            self::CURRENCY_MGA,
            self::CURRENCY_MKD,
            self::CURRENCY_MMK,
            self::CURRENCY_MNT,
            self::CURRENCY_MOP,
            self::CURRENCY_MRO,
            self::CURRENCY_MUR,
            self::CURRENCY_MVR,
            self::CURRENCY_MWK,
            self::CURRENCY_MXN,
            self::CURRENCY_MXV,
            self::CURRENCY_MYR,
            self::CURRENCY_MZN,
            self::CURRENCY_NAD,
            self::CURRENCY_NGN,
            self::CURRENCY_NIO,
            self::CURRENCY_NOK,
            self::CURRENCY_NPR,
            self::CURRENCY_NZD,
            self::CURRENCY_OMR,
            self::CURRENCY_PAB,
            self::CURRENCY_PEN,
            self::CURRENCY_PGK,
            self::CURRENCY_PHP,
            self::CURRENCY_PKR,
            self::CURRENCY_PLN,
            self::CURRENCY_PYG,
            self::CURRENCY_QAR,
            self::CURRENCY_RON,
            self::CURRENCY_RSD,
            self::CURRENCY_RUB,
            self::CURRENCY_RWF,
            self::CURRENCY_SAR,
            self::CURRENCY_SBD,
            self::CURRENCY_SCR,
            self::CURRENCY_SDG,
            self::CURRENCY_SEK,
            self::CURRENCY_SGD,
            self::CURRENCY_SHP,
            self::CURRENCY_SLL,
            self::CURRENCY_SOS,
            self::CURRENCY_SRD,
            self::CURRENCY_SSP,
            self::CURRENCY_STD,
            self::CURRENCY_SVC,
            self::CURRENCY_SYP,
            self::CURRENCY_SZL,
            self::CURRENCY_THB,
            self::CURRENCY_TJS,
            self::CURRENCY_TMT,
            self::CURRENCY_TND,
            self::CURRENCY_TOP,
            self::CURRENCY_TRC,
            self::CURRENCY__TRY,
            self::CURRENCY_TTD,
            self::CURRENCY_TWD,
            self::CURRENCY_TZS,
            self::CURRENCY_UAH,
            self::CURRENCY_UGX,
            self::CURRENCY_USD,
            self::CURRENCY_USN,
            self::CURRENCY_USS,
            self::CURRENCY_UYI,
            self::CURRENCY_UYU,
            self::CURRENCY_UZS,
            self::CURRENCY_VEF,
            self::CURRENCY_VND,
            self::CURRENCY_VUV,
            self::CURRENCY_WST,
            self::CURRENCY_XAF,
            self::CURRENCY_XAG,
            self::CURRENCY_XAU,
            self::CURRENCY_XBA,
            self::CURRENCY_XBB,
            self::CURRENCY_XBC,
            self::CURRENCY_XBD,
            self::CURRENCY_XCD,
            self::CURRENCY_XDR,
            self::CURRENCY_XOF,
            self::CURRENCY_XPD,
            self::CURRENCY_XPF,
            self::CURRENCY_XPT,
            self::CURRENCY_XTS,
            self::CURRENCY_XXX,
            self::CURRENCY_YER,
            self::CURRENCY_ZAR,
            self::CURRENCY_ZMK,
            self::CURRENCY_ZMW,
            self::CURRENCY_BTC,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSourceAllowableValues()
    {
        return [
            self::SOURCE_IN_STORE,
            self::SOURCE_ONLINE,
            self::SOURCE_OPT,
            self::SOURCE_API,
            self::SOURCE_KIOSK,
            self::SOURCE_CALLER_ID,
            self::SOURCE_GOOGLE,
            self::SOURCE_INVOICE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['merchant_id'] = $data['merchant_id'] ?? null;
        $this->container['location_id'] = $data['location_id'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['order_number'] = $data['order_number'] ?? null;
        $this->container['order_date'] = $data['order_date'] ?? null;
        $this->container['closed_date'] = $data['closed_date'] ?? null;
        $this->container['reference_id'] = $data['reference_id'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['state'] = $data['state'] ?? null;
        $this->container['payment_status'] = $data['payment_status'] ?? null;
        $this->container['currency'] = $data['currency'] ?? null;
        $this->container['title'] = $data['title'] ?? null;
        $this->container['note'] = $data['note'] ?? null;
        $this->container['customer_id'] = $data['customer_id'] ?? null;
        $this->container['employee_id'] = $data['employee_id'] ?? null;
        $this->container['order_type_id'] = $data['order_type_id'] ?? null;
        $this->container['table'] = $data['table'] ?? null;
        $this->container['seat'] = $data['seat'] ?? null;
        $this->container['total_amount'] = $data['total_amount'] ?? null;
        $this->container['total_tip'] = $data['total_tip'] ?? null;
        $this->container['total_tax'] = $data['total_tax'] ?? null;
        $this->container['total_discount'] = $data['total_discount'] ?? null;
        $this->container['total_refund'] = $data['total_refund'] ?? null;
        $this->container['total_service_charge'] = $data['total_service_charge'] ?? null;
        $this->container['refunded'] = $data['refunded'] ?? null;
        $this->container['customers'] = $data['customers'] ?? null;
        $this->container['fulfillments'] = $data['fulfillments'] ?? null;
        $this->container['line_items'] = $data['line_items'] ?? null;
        $this->container['payments'] = $data['payments'] ?? null;
        $this->container['service_charges'] = $data['service_charges'] ?? null;
        $this->container['refunds'] = $data['refunds'] ?? null;
        $this->container['taxes'] = $data['taxes'] ?? null;
        $this->container['discounts'] = $data['discounts'] ?? null;
        $this->container['tenders'] = $data['tenders'] ?? null;
        $this->container['source'] = $data['source'] ?? null;
        $this->container['voided'] = $data['voided'] ?? null;
        $this->container['voided_at'] = $data['voided_at'] ?? null;
        $this->container['version'] = $data['version'] ?? null;
        $this->container['updated_by'] = $data['updated_by'] ?? null;
        $this->container['created_by'] = $data['created_by'] ?? null;
        $this->container['updated_at'] = $data['updated_at'] ?? null;
        $this->container['created_at'] = $data['created_at'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['merchant_id'] === null) {
            $invalidProperties[] = "'merchant_id' can't be null";
        }
        if ($this->container['location_id'] === null) {
            $invalidProperties[] = "'location_id' can't be null";
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPaymentStatusAllowableValues();
        if (!is_null($this->container['payment_status']) && !in_array($this->container['payment_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'payment_status', must be one of '%s'",
                $this->container['payment_status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCurrencyAllowableValues();
        if (!is_null($this->container['currency']) && !in_array($this->container['currency'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'currency', must be one of '%s'",
                $this->container['currency'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSourceAllowableValues();
        if (!is_null($this->container['source']) && !in_array($this->container['source'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'source', must be one of '%s'",
                $this->container['source'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets merchant_id
     *
     * @return string
     */
    public function getMerchantId()
    {
        return $this->container['merchant_id'];
    }

    /**
     * Sets merchant_id
     *
     * @param string $merchant_id merchant_id
     *
     * @return self
     */
    public function setMerchantId($merchant_id)
    {
        $this->container['merchant_id'] = $merchant_id;

        return $this;
    }

    /**
     * Gets location_id
     *
     * @return string
     */
    public function getLocationId()
    {
        return $this->container['location_id'];
    }

    /**
     * Sets location_id
     *
     * @param string $location_id location_id
     *
     * @return self
     */
    public function setLocationId($location_id)
    {
        $this->container['location_id'] = $location_id;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets order_number
     *
     * @return string|null
     */
    public function getOrderNumber()
    {
        return $this->container['order_number'];
    }

    /**
     * Sets order_number
     *
     * @param string|null $order_number order_number
     *
     * @return self
     */
    public function setOrderNumber($order_number)
    {
        $this->container['order_number'] = $order_number;

        return $this;
    }

    /**
     * Gets order_date
     *
     * @return \DateTime|null
     */
    public function getOrderDate()
    {
        return $this->container['order_date'];
    }

    /**
     * Sets order_date
     *
     * @param \DateTime|null $order_date order_date
     *
     * @return self
     */
    public function setOrderDate($order_date)
    {
        $this->container['order_date'] = $order_date;

        return $this;
    }

    /**
     * Gets closed_date
     *
     * @return \DateTime|null
     */
    public function getClosedDate()
    {
        return $this->container['closed_date'];
    }

    /**
     * Sets closed_date
     *
     * @param \DateTime|null $closed_date closed_date
     *
     * @return self
     */
    public function setClosedDate($closed_date)
    {
        $this->container['closed_date'] = $closed_date;

        return $this;
    }

    /**
     * Gets reference_id
     *
     * @return string|null
     */
    public function getReferenceId()
    {
        return $this->container['reference_id'];
    }

    /**
     * Sets reference_id
     *
     * @param string|null $reference_id An optional user-defined reference ID that associates this record with another entity in an external system. For example, a customer ID from an external customer management system.
     *
     * @return self
     */
    public function setReferenceId($reference_id)
    {
        $this->container['reference_id'] = $reference_id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state A string describing the state of the order. Clover specific: If no value is set, the state defaults to null, which indicates a hidden order. A hidden order is not displayed in user interfaces and can only be retrieved by its id. When creating an order via the REST API the value must be manually set to 'open'. More info [https://docs.clover.com/reference/orderupdateorder]()
     *
     * @return self
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets payment_status
     *
     * @return string|null
     */
    public function getPaymentStatus()
    {
        return $this->container['payment_status'];
    }

    /**
     * Sets payment_status
     *
     * @param string|null $payment_status Is this order paid or not?
     *
     * @return self
     */
    public function setPaymentStatus($payment_status)
    {
        $allowedValues = $this->getPaymentStatusAllowableValues();
        if (!is_null($payment_status) && !in_array($payment_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'payment_status', must be one of '%s'",
                    $payment_status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['payment_status'] = $payment_status;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency Indicates the associated currency for an amount of money. Values correspond to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        $allowedValues = $this->getCurrencyAllowableValues();
        if (!is_null($currency) && !in_array($currency, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'currency', must be one of '%s'",
                    $currency,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title title
     *
     * @return self
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string|null
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string|null $note A note with information about this order, may be printed on the order receipt and displayed in apps
     *
     * @return self
     */
    public function setNote($note)
    {
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets customer_id
     *
     * @return string|null
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param string|null $customer_id customer_id
     *
     * @return self
     */
    public function setCustomerId($customer_id)
    {
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets employee_id
     *
     * @return string|null
     */
    public function getEmployeeId()
    {
        return $this->container['employee_id'];
    }

    /**
     * Sets employee_id
     *
     * @param string|null $employee_id employee_id
     *
     * @return self
     */
    public function setEmployeeId($employee_id)
    {
        $this->container['employee_id'] = $employee_id;

        return $this;
    }

    /**
     * Gets order_type_id
     *
     * @return string|null
     */
    public function getOrderTypeId()
    {
        return $this->container['order_type_id'];
    }

    /**
     * Sets order_type_id
     *
     * @param string|null $order_type_id order_type_id
     *
     * @return self
     */
    public function setOrderTypeId($order_type_id)
    {
        $this->container['order_type_id'] = $order_type_id;

        return $this;
    }

    /**
     * Gets table
     *
     * @return string|null
     */
    public function getTable()
    {
        return $this->container['table'];
    }

    /**
     * Sets table
     *
     * @param string|null $table table
     *
     * @return self
     */
    public function setTable($table)
    {
        $this->container['table'] = $table;

        return $this;
    }

    /**
     * Gets seat
     *
     * @return string|null
     */
    public function getSeat()
    {
        return $this->container['seat'];
    }

    /**
     * Sets seat
     *
     * @param string|null $seat seat
     *
     * @return self
     */
    public function setSeat($seat)
    {
        $this->container['seat'] = $seat;

        return $this;
    }

    /**
     * Gets total_amount
     *
     * @return float|null
     */
    public function getTotalAmount()
    {
        return $this->container['total_amount'];
    }

    /**
     * Sets total_amount
     *
     * @param float|null $total_amount total_amount
     *
     * @return self
     */
    public function setTotalAmount($total_amount)
    {
        $this->container['total_amount'] = $total_amount;

        return $this;
    }

    /**
     * Gets total_tip
     *
     * @return float|null
     */
    public function getTotalTip()
    {
        return $this->container['total_tip'];
    }

    /**
     * Sets total_tip
     *
     * @param float|null $total_tip total_tip
     *
     * @return self
     */
    public function setTotalTip($total_tip)
    {
        $this->container['total_tip'] = $total_tip;

        return $this;
    }

    /**
     * Gets total_tax
     *
     * @return float|null
     */
    public function getTotalTax()
    {
        return $this->container['total_tax'];
    }

    /**
     * Sets total_tax
     *
     * @param float|null $total_tax total_tax
     *
     * @return self
     */
    public function setTotalTax($total_tax)
    {
        $this->container['total_tax'] = $total_tax;

        return $this;
    }

    /**
     * Gets total_discount
     *
     * @return float|null
     */
    public function getTotalDiscount()
    {
        return $this->container['total_discount'];
    }

    /**
     * Sets total_discount
     *
     * @param float|null $total_discount total_discount
     *
     * @return self
     */
    public function setTotalDiscount($total_discount)
    {
        $this->container['total_discount'] = $total_discount;

        return $this;
    }

    /**
     * Gets total_refund
     *
     * @return float|null
     */
    public function getTotalRefund()
    {
        return $this->container['total_refund'];
    }

    /**
     * Sets total_refund
     *
     * @param float|null $total_refund total_refund
     *
     * @return self
     */
    public function setTotalRefund($total_refund)
    {
        $this->container['total_refund'] = $total_refund;

        return $this;
    }

    /**
     * Gets total_service_charge
     *
     * @return float|null
     */
    public function getTotalServiceCharge()
    {
        return $this->container['total_service_charge'];
    }

    /**
     * Sets total_service_charge
     *
     * @param float|null $total_service_charge total_service_charge
     *
     * @return self
     */
    public function setTotalServiceCharge($total_service_charge)
    {
        $this->container['total_service_charge'] = $total_service_charge;

        return $this;
    }

    /**
     * Gets refunded
     *
     * @return bool|null
     */
    public function getRefunded()
    {
        return $this->container['refunded'];
    }

    /**
     * Sets refunded
     *
     * @param bool|null $refunded refunded
     *
     * @return self
     */
    public function setRefunded($refunded)
    {
        $this->container['refunded'] = $refunded;

        return $this;
    }

    /**
     * Gets customers
     *
     * @return \Apideck\Client\Model\OrderCustomers[]|null
     */
    public function getCustomers()
    {
        return $this->container['customers'];
    }

    /**
     * Sets customers
     *
     * @param \Apideck\Client\Model\OrderCustomers[]|null $customers customers
     *
     * @return self
     */
    public function setCustomers($customers)
    {
        $this->container['customers'] = $customers;

        return $this;
    }

    /**
     * Gets fulfillments
     *
     * @return \Apideck\Client\Model\OrderFulfillments[]|null
     */
    public function getFulfillments()
    {
        return $this->container['fulfillments'];
    }

    /**
     * Sets fulfillments
     *
     * @param \Apideck\Client\Model\OrderFulfillments[]|null $fulfillments fulfillments
     *
     * @return self
     */
    public function setFulfillments($fulfillments)
    {
        $this->container['fulfillments'] = $fulfillments;

        return $this;
    }

    /**
     * Gets line_items
     *
     * @return \Apideck\Client\Model\OrderLineItems[]|null
     */
    public function getLineItems()
    {
        return $this->container['line_items'];
    }

    /**
     * Sets line_items
     *
     * @param \Apideck\Client\Model\OrderLineItems[]|null $line_items line_items
     *
     * @return self
     */
    public function setLineItems($line_items)
    {
        $this->container['line_items'] = $line_items;

        return $this;
    }

    /**
     * Gets payments
     *
     * @return \Apideck\Client\Model\OrderPayments[]|null
     */
    public function getPayments()
    {
        return $this->container['payments'];
    }

    /**
     * Sets payments
     *
     * @param \Apideck\Client\Model\OrderPayments[]|null $payments payments
     *
     * @return self
     */
    public function setPayments($payments)
    {
        $this->container['payments'] = $payments;

        return $this;
    }

    /**
     * Gets service_charges
     *
     * @return object[]|null
     */
    public function getServiceCharges()
    {
        return $this->container['service_charges'];
    }

    /**
     * Sets service_charges
     *
     * @param object[]|null $service_charges Optional service charges or gratuity tip applied to the order.
     *
     * @return self
     */
    public function setServiceCharges($service_charges)
    {
        $this->container['service_charges'] = $service_charges;

        return $this;
    }

    /**
     * Gets refunds
     *
     * @return \Apideck\Client\Model\OrderRefunds[]|null
     */
    public function getRefunds()
    {
        return $this->container['refunds'];
    }

    /**
     * Sets refunds
     *
     * @param \Apideck\Client\Model\OrderRefunds[]|null $refunds refunds
     *
     * @return self
     */
    public function setRefunds($refunds)
    {
        $this->container['refunds'] = $refunds;

        return $this;
    }

    /**
     * Gets taxes
     *
     * @return object[]|null
     */
    public function getTaxes()
    {
        return $this->container['taxes'];
    }

    /**
     * Sets taxes
     *
     * @param object[]|null $taxes taxes
     *
     * @return self
     */
    public function setTaxes($taxes)
    {
        $this->container['taxes'] = $taxes;

        return $this;
    }

    /**
     * Gets discounts
     *
     * @return \Apideck\Client\Model\OrderDiscounts[]|null
     */
    public function getDiscounts()
    {
        return $this->container['discounts'];
    }

    /**
     * Sets discounts
     *
     * @param \Apideck\Client\Model\OrderDiscounts[]|null $discounts discounts
     *
     * @return self
     */
    public function setDiscounts($discounts)
    {
        $this->container['discounts'] = $discounts;

        return $this;
    }

    /**
     * Gets tenders
     *
     * @return \Apideck\Client\Model\OrderTenders[]|null
     */
    public function getTenders()
    {
        return $this->container['tenders'];
    }

    /**
     * Sets tenders
     *
     * @param \Apideck\Client\Model\OrderTenders[]|null $tenders tenders
     *
     * @return self
     */
    public function setTenders($tenders)
    {
        $this->container['tenders'] = $tenders;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string|null
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string|null $source Source of order. Indicates the way that the order was placed.
     *
     * @return self
     */
    public function setSource($source)
    {
        $allowedValues = $this->getSourceAllowableValues();
        if (!is_null($source) && !in_array($source, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'source', must be one of '%s'",
                    $source,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets voided
     *
     * @return bool|null
     */
    public function getVoided()
    {
        return $this->container['voided'];
    }

    /**
     * Sets voided
     *
     * @param bool|null $voided voided
     *
     * @return self
     */
    public function setVoided($voided)
    {
        $this->container['voided'] = $voided;

        return $this;
    }

    /**
     * Gets voided_at
     *
     * @return \DateTime|null
     */
    public function getVoidedAt()
    {
        return $this->container['voided_at'];
    }

    /**
     * Sets voided_at
     *
     * @param \DateTime|null $voided_at voided_at
     *
     * @return self
     */
    public function setVoidedAt($voided_at)
    {
        $this->container['voided_at'] = $voided_at;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version version
     *
     * @return self
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets updated_by
     *
     * @return \Apideck\Client\Model\Version|null
     */
    public function getUpdatedBy()
    {
        return $this->container['updated_by'];
    }

    /**
     * Sets updated_by
     *
     * @param \Apideck\Client\Model\Version|null $updated_by updated_by
     *
     * @return self
     */
    public function setUpdatedBy($updated_by)
    {
        $this->container['updated_by'] = $updated_by;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return \Apideck\Client\Model\CreatedBy|null
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param \Apideck\Client\Model\CreatedBy|null $created_by created_by
     *
     * @return self
     */
    public function setCreatedBy($created_by)
    {
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \Apideck\Client\Model\UpdatedAt|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \Apideck\Client\Model\UpdatedAt|null $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \Apideck\Client\Model\CreatedAt|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \Apideck\Client\Model\CreatedAt|null $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


