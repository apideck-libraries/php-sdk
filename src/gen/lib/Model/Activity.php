<?php
/**
 * Activity
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Apideck\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Apideck
 *
 * The Apideck OpenAPI Spec: SDK Optimized
 *
 * The version of the OpenAPI document: 8.32.4
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Apideck\Client\Model;

use \ArrayAccess;
use \Apideck\Client\ObjectSerializer;

/**
 * Activity Class Doc Comment
 *
 * @category Class
 * @package  Apideck\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Activity implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Activity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'type' => 'string',
        'id' => 'string',
        'downstream_id' => 'string',
        'activity_datetime' => 'string',
        'duration_seconds' => 'int',
        'user_id' => 'string',
        'account_id' => 'string',
        'contact_id' => 'string',
        'company_id' => 'string',
        'opportunity_id' => 'string',
        'lead_id' => 'string',
        'owner_id' => 'string',
        'campaign_id' => 'string',
        'case_id' => 'string',
        'asset_id' => 'string',
        'contract_id' => 'string',
        'product_id' => 'string',
        'solution_id' => 'string',
        'custom_object_id' => 'string',
        'title' => 'string',
        'description' => 'string',
        'note' => 'string',
        'location' => 'string',
        'location_address' => '\Apideck\Client\Model\Address',
        'all_day_event' => 'bool',
        'private' => 'bool',
        'group_event' => 'bool',
        'event_sub_type' => 'string',
        'group_event_type' => 'string',
        'child' => 'bool',
        'archived' => 'bool',
        'deleted' => 'bool',
        'show_as' => 'string',
        'done' => 'bool',
        'start_datetime' => 'string',
        'end_datetime' => 'string',
        'duration_minutes' => 'int',
        'activity_date' => 'string',
        'end_date' => 'string',
        'recurrent' => 'bool',
        'reminder_datetime' => 'string',
        'reminder_set' => 'bool',
        'video_conference_url' => 'string',
        'video_conference_id' => 'string',
        'custom_fields' => '\Apideck\Client\Model\CustomField[]',
        'attendees' => '\Apideck\Client\Model\ActivityAttendee[]',
        'updated_by' => 'string',
        'created_by' => 'string',
        'updated_at' => 'string',
        'created_at' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'type' => null,
        'id' => null,
        'downstream_id' => null,
        'activity_datetime' => null,
        'duration_seconds' => null,
        'user_id' => null,
        'account_id' => null,
        'contact_id' => null,
        'company_id' => null,
        'opportunity_id' => null,
        'lead_id' => null,
        'owner_id' => null,
        'campaign_id' => null,
        'case_id' => null,
        'asset_id' => null,
        'contract_id' => null,
        'product_id' => null,
        'solution_id' => null,
        'custom_object_id' => null,
        'title' => null,
        'description' => null,
        'note' => null,
        'location' => null,
        'location_address' => null,
        'all_day_event' => null,
        'private' => null,
        'group_event' => null,
        'event_sub_type' => null,
        'group_event_type' => null,
        'child' => null,
        'archived' => null,
        'deleted' => null,
        'show_as' => null,
        'done' => null,
        'start_datetime' => null,
        'end_datetime' => null,
        'duration_minutes' => null,
        'activity_date' => null,
        'end_date' => null,
        'recurrent' => null,
        'reminder_datetime' => null,
        'reminder_set' => null,
        'video_conference_url' => null,
        'video_conference_id' => null,
        'custom_fields' => null,
        'attendees' => null,
        'updated_by' => null,
        'created_by' => null,
        'updated_at' => null,
        'created_at' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'id' => 'id',
        'downstream_id' => 'downstream_id',
        'activity_datetime' => 'activity_datetime',
        'duration_seconds' => 'duration_seconds',
        'user_id' => 'user_id',
        'account_id' => 'account_id',
        'contact_id' => 'contact_id',
        'company_id' => 'company_id',
        'opportunity_id' => 'opportunity_id',
        'lead_id' => 'lead_id',
        'owner_id' => 'owner_id',
        'campaign_id' => 'campaign_id',
        'case_id' => 'case_id',
        'asset_id' => 'asset_id',
        'contract_id' => 'contract_id',
        'product_id' => 'product_id',
        'solution_id' => 'solution_id',
        'custom_object_id' => 'custom_object_id',
        'title' => 'title',
        'description' => 'description',
        'note' => 'note',
        'location' => 'location',
        'location_address' => 'location_address',
        'all_day_event' => 'all_day_event',
        'private' => 'private',
        'group_event' => 'group_event',
        'event_sub_type' => 'event_sub_type',
        'group_event_type' => 'group_event_type',
        'child' => 'child',
        'archived' => 'archived',
        'deleted' => 'deleted',
        'show_as' => 'show_as',
        'done' => 'done',
        'start_datetime' => 'start_datetime',
        'end_datetime' => 'end_datetime',
        'duration_minutes' => 'duration_minutes',
        'activity_date' => 'activity_date',
        'end_date' => 'end_date',
        'recurrent' => 'recurrent',
        'reminder_datetime' => 'reminder_datetime',
        'reminder_set' => 'reminder_set',
        'video_conference_url' => 'video_conference_url',
        'video_conference_id' => 'video_conference_id',
        'custom_fields' => 'custom_fields',
        'attendees' => 'attendees',
        'updated_by' => 'updated_by',
        'created_by' => 'created_by',
        'updated_at' => 'updated_at',
        'created_at' => 'created_at'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'id' => 'setId',
        'downstream_id' => 'setDownstreamId',
        'activity_datetime' => 'setActivityDatetime',
        'duration_seconds' => 'setDurationSeconds',
        'user_id' => 'setUserId',
        'account_id' => 'setAccountId',
        'contact_id' => 'setContactId',
        'company_id' => 'setCompanyId',
        'opportunity_id' => 'setOpportunityId',
        'lead_id' => 'setLeadId',
        'owner_id' => 'setOwnerId',
        'campaign_id' => 'setCampaignId',
        'case_id' => 'setCaseId',
        'asset_id' => 'setAssetId',
        'contract_id' => 'setContractId',
        'product_id' => 'setProductId',
        'solution_id' => 'setSolutionId',
        'custom_object_id' => 'setCustomObjectId',
        'title' => 'setTitle',
        'description' => 'setDescription',
        'note' => 'setNote',
        'location' => 'setLocation',
        'location_address' => 'setLocationAddress',
        'all_day_event' => 'setAllDayEvent',
        'private' => 'setPrivate',
        'group_event' => 'setGroupEvent',
        'event_sub_type' => 'setEventSubType',
        'group_event_type' => 'setGroupEventType',
        'child' => 'setChild',
        'archived' => 'setArchived',
        'deleted' => 'setDeleted',
        'show_as' => 'setShowAs',
        'done' => 'setDone',
        'start_datetime' => 'setStartDatetime',
        'end_datetime' => 'setEndDatetime',
        'duration_minutes' => 'setDurationMinutes',
        'activity_date' => 'setActivityDate',
        'end_date' => 'setEndDate',
        'recurrent' => 'setRecurrent',
        'reminder_datetime' => 'setReminderDatetime',
        'reminder_set' => 'setReminderSet',
        'video_conference_url' => 'setVideoConferenceUrl',
        'video_conference_id' => 'setVideoConferenceId',
        'custom_fields' => 'setCustomFields',
        'attendees' => 'setAttendees',
        'updated_by' => 'setUpdatedBy',
        'created_by' => 'setCreatedBy',
        'updated_at' => 'setUpdatedAt',
        'created_at' => 'setCreatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'id' => 'getId',
        'downstream_id' => 'getDownstreamId',
        'activity_datetime' => 'getActivityDatetime',
        'duration_seconds' => 'getDurationSeconds',
        'user_id' => 'getUserId',
        'account_id' => 'getAccountId',
        'contact_id' => 'getContactId',
        'company_id' => 'getCompanyId',
        'opportunity_id' => 'getOpportunityId',
        'lead_id' => 'getLeadId',
        'owner_id' => 'getOwnerId',
        'campaign_id' => 'getCampaignId',
        'case_id' => 'getCaseId',
        'asset_id' => 'getAssetId',
        'contract_id' => 'getContractId',
        'product_id' => 'getProductId',
        'solution_id' => 'getSolutionId',
        'custom_object_id' => 'getCustomObjectId',
        'title' => 'getTitle',
        'description' => 'getDescription',
        'note' => 'getNote',
        'location' => 'getLocation',
        'location_address' => 'getLocationAddress',
        'all_day_event' => 'getAllDayEvent',
        'private' => 'getPrivate',
        'group_event' => 'getGroupEvent',
        'event_sub_type' => 'getEventSubType',
        'group_event_type' => 'getGroupEventType',
        'child' => 'getChild',
        'archived' => 'getArchived',
        'deleted' => 'getDeleted',
        'show_as' => 'getShowAs',
        'done' => 'getDone',
        'start_datetime' => 'getStartDatetime',
        'end_datetime' => 'getEndDatetime',
        'duration_minutes' => 'getDurationMinutes',
        'activity_date' => 'getActivityDate',
        'end_date' => 'getEndDate',
        'recurrent' => 'getRecurrent',
        'reminder_datetime' => 'getReminderDatetime',
        'reminder_set' => 'getReminderSet',
        'video_conference_url' => 'getVideoConferenceUrl',
        'video_conference_id' => 'getVideoConferenceId',
        'custom_fields' => 'getCustomFields',
        'attendees' => 'getAttendees',
        'updated_by' => 'getUpdatedBy',
        'created_by' => 'getCreatedBy',
        'updated_at' => 'getUpdatedAt',
        'created_at' => 'getCreatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const TYPE_CALL = 'call';
    const TYPE_MEETING = 'meeting';
    const TYPE_EMAIL = 'email';
    const TYPE_NOTE = 'note';
    const TYPE_TASK = 'task';
    const TYPE_DEADLINE = 'deadline';
    const TYPE_SEND_LETTER = 'send-letter';
    const TYPE_SEND_QUOTE = 'send-quote';
    const TYPE_OTHER = 'other';
    const SHOW_AS_FREE = 'free';
    const SHOW_AS_BUSY = 'busy';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_CALL,
            self::TYPE_MEETING,
            self::TYPE_EMAIL,
            self::TYPE_NOTE,
            self::TYPE_TASK,
            self::TYPE_DEADLINE,
            self::TYPE_SEND_LETTER,
            self::TYPE_SEND_QUOTE,
            self::TYPE_OTHER,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getShowAsAllowableValues()
    {
        return [
            self::SHOW_AS_FREE,
            self::SHOW_AS_BUSY,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type'] = $data['type'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['downstream_id'] = $data['downstream_id'] ?? null;
        $this->container['activity_datetime'] = $data['activity_datetime'] ?? null;
        $this->container['duration_seconds'] = $data['duration_seconds'] ?? null;
        $this->container['user_id'] = $data['user_id'] ?? null;
        $this->container['account_id'] = $data['account_id'] ?? null;
        $this->container['contact_id'] = $data['contact_id'] ?? null;
        $this->container['company_id'] = $data['company_id'] ?? null;
        $this->container['opportunity_id'] = $data['opportunity_id'] ?? null;
        $this->container['lead_id'] = $data['lead_id'] ?? null;
        $this->container['owner_id'] = $data['owner_id'] ?? null;
        $this->container['campaign_id'] = $data['campaign_id'] ?? null;
        $this->container['case_id'] = $data['case_id'] ?? null;
        $this->container['asset_id'] = $data['asset_id'] ?? null;
        $this->container['contract_id'] = $data['contract_id'] ?? null;
        $this->container['product_id'] = $data['product_id'] ?? null;
        $this->container['solution_id'] = $data['solution_id'] ?? null;
        $this->container['custom_object_id'] = $data['custom_object_id'] ?? null;
        $this->container['title'] = $data['title'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['note'] = $data['note'] ?? null;
        $this->container['location'] = $data['location'] ?? null;
        $this->container['location_address'] = $data['location_address'] ?? null;
        $this->container['all_day_event'] = $data['all_day_event'] ?? null;
        $this->container['private'] = $data['private'] ?? null;
        $this->container['group_event'] = $data['group_event'] ?? null;
        $this->container['event_sub_type'] = $data['event_sub_type'] ?? null;
        $this->container['group_event_type'] = $data['group_event_type'] ?? null;
        $this->container['child'] = $data['child'] ?? null;
        $this->container['archived'] = $data['archived'] ?? null;
        $this->container['deleted'] = $data['deleted'] ?? null;
        $this->container['show_as'] = $data['show_as'] ?? null;
        $this->container['done'] = $data['done'] ?? null;
        $this->container['start_datetime'] = $data['start_datetime'] ?? null;
        $this->container['end_datetime'] = $data['end_datetime'] ?? null;
        $this->container['duration_minutes'] = $data['duration_minutes'] ?? null;
        $this->container['activity_date'] = $data['activity_date'] ?? null;
        $this->container['end_date'] = $data['end_date'] ?? null;
        $this->container['recurrent'] = $data['recurrent'] ?? null;
        $this->container['reminder_datetime'] = $data['reminder_datetime'] ?? null;
        $this->container['reminder_set'] = $data['reminder_set'] ?? null;
        $this->container['video_conference_url'] = $data['video_conference_url'] ?? null;
        $this->container['video_conference_id'] = $data['video_conference_id'] ?? null;
        $this->container['custom_fields'] = $data['custom_fields'] ?? null;
        $this->container['attendees'] = $data['attendees'] ?? null;
        $this->container['updated_by'] = $data['updated_by'] ?? null;
        $this->container['created_by'] = $data['created_by'] ?? null;
        $this->container['updated_at'] = $data['updated_at'] ?? null;
        $this->container['created_at'] = $data['created_at'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['duration_seconds']) && ($this->container['duration_seconds'] < 0)) {
            $invalidProperties[] = "invalid value for 'duration_seconds', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getShowAsAllowableValues();
        if (!is_null($this->container['show_as']) && !in_array($this->container['show_as'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'show_as', must be one of '%s'",
                $this->container['show_as'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return self
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets downstream_id
     *
     * @return string|null
     */
    public function getDownstreamId()
    {
        return $this->container['downstream_id'];
    }

    /**
     * Sets downstream_id
     *
     * @param string|null $downstream_id The third-party API ID of original entity
     *
     * @return self
     */
    public function setDownstreamId($downstream_id)
    {
        $this->container['downstream_id'] = $downstream_id;

        return $this;
    }

    /**
     * Gets activity_datetime
     *
     * @return string|null
     */
    public function getActivityDatetime()
    {
        return $this->container['activity_datetime'];
    }

    /**
     * Sets activity_datetime
     *
     * @param string|null $activity_datetime activity_datetime
     *
     * @return self
     */
    public function setActivityDatetime($activity_datetime)
    {
        $this->container['activity_datetime'] = $activity_datetime;

        return $this;
    }

    /**
     * Gets duration_seconds
     *
     * @return int|null
     */
    public function getDurationSeconds()
    {
        return $this->container['duration_seconds'];
    }

    /**
     * Sets duration_seconds
     *
     * @param int|null $duration_seconds duration_seconds
     *
     * @return self
     */
    public function setDurationSeconds($duration_seconds)
    {

        if (!is_null($duration_seconds) && ($duration_seconds < 0)) {
            throw new \InvalidArgumentException('invalid value for $duration_seconds when calling Activity., must be bigger than or equal to 0.');
        }

        $this->container['duration_seconds'] = $duration_seconds;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return string|null
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param string|null $user_id user_id
     *
     * @return self
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets account_id
     *
     * @return string|null
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string|null $account_id account_id
     *
     * @return self
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets contact_id
     *
     * @return string|null
     */
    public function getContactId()
    {
        return $this->container['contact_id'];
    }

    /**
     * Sets contact_id
     *
     * @param string|null $contact_id contact_id
     *
     * @return self
     */
    public function setContactId($contact_id)
    {
        $this->container['contact_id'] = $contact_id;

        return $this;
    }

    /**
     * Gets company_id
     *
     * @return string|null
     */
    public function getCompanyId()
    {
        return $this->container['company_id'];
    }

    /**
     * Sets company_id
     *
     * @param string|null $company_id company_id
     *
     * @return self
     */
    public function setCompanyId($company_id)
    {
        $this->container['company_id'] = $company_id;

        return $this;
    }

    /**
     * Gets opportunity_id
     *
     * @return string|null
     */
    public function getOpportunityId()
    {
        return $this->container['opportunity_id'];
    }

    /**
     * Sets opportunity_id
     *
     * @param string|null $opportunity_id opportunity_id
     *
     * @return self
     */
    public function setOpportunityId($opportunity_id)
    {
        $this->container['opportunity_id'] = $opportunity_id;

        return $this;
    }

    /**
     * Gets lead_id
     *
     * @return string|null
     */
    public function getLeadId()
    {
        return $this->container['lead_id'];
    }

    /**
     * Sets lead_id
     *
     * @param string|null $lead_id lead_id
     *
     * @return self
     */
    public function setLeadId($lead_id)
    {
        $this->container['lead_id'] = $lead_id;

        return $this;
    }

    /**
     * Gets owner_id
     *
     * @return string|null
     */
    public function getOwnerId()
    {
        return $this->container['owner_id'];
    }

    /**
     * Sets owner_id
     *
     * @param string|null $owner_id owner_id
     *
     * @return self
     */
    public function setOwnerId($owner_id)
    {
        $this->container['owner_id'] = $owner_id;

        return $this;
    }

    /**
     * Gets campaign_id
     *
     * @return string|null
     */
    public function getCampaignId()
    {
        return $this->container['campaign_id'];
    }

    /**
     * Sets campaign_id
     *
     * @param string|null $campaign_id campaign_id
     *
     * @return self
     */
    public function setCampaignId($campaign_id)
    {
        $this->container['campaign_id'] = $campaign_id;

        return $this;
    }

    /**
     * Gets case_id
     *
     * @return string|null
     */
    public function getCaseId()
    {
        return $this->container['case_id'];
    }

    /**
     * Sets case_id
     *
     * @param string|null $case_id case_id
     *
     * @return self
     */
    public function setCaseId($case_id)
    {
        $this->container['case_id'] = $case_id;

        return $this;
    }

    /**
     * Gets asset_id
     *
     * @return string|null
     */
    public function getAssetId()
    {
        return $this->container['asset_id'];
    }

    /**
     * Sets asset_id
     *
     * @param string|null $asset_id asset_id
     *
     * @return self
     */
    public function setAssetId($asset_id)
    {
        $this->container['asset_id'] = $asset_id;

        return $this;
    }

    /**
     * Gets contract_id
     *
     * @return string|null
     */
    public function getContractId()
    {
        return $this->container['contract_id'];
    }

    /**
     * Sets contract_id
     *
     * @param string|null $contract_id contract_id
     *
     * @return self
     */
    public function setContractId($contract_id)
    {
        $this->container['contract_id'] = $contract_id;

        return $this;
    }

    /**
     * Gets product_id
     *
     * @return string|null
     */
    public function getProductId()
    {
        return $this->container['product_id'];
    }

    /**
     * Sets product_id
     *
     * @param string|null $product_id product_id
     *
     * @return self
     */
    public function setProductId($product_id)
    {
        $this->container['product_id'] = $product_id;

        return $this;
    }

    /**
     * Gets solution_id
     *
     * @return string|null
     */
    public function getSolutionId()
    {
        return $this->container['solution_id'];
    }

    /**
     * Sets solution_id
     *
     * @param string|null $solution_id solution_id
     *
     * @return self
     */
    public function setSolutionId($solution_id)
    {
        $this->container['solution_id'] = $solution_id;

        return $this;
    }

    /**
     * Gets custom_object_id
     *
     * @return string|null
     */
    public function getCustomObjectId()
    {
        return $this->container['custom_object_id'];
    }

    /**
     * Sets custom_object_id
     *
     * @param string|null $custom_object_id custom_object_id
     *
     * @return self
     */
    public function setCustomObjectId($custom_object_id)
    {
        $this->container['custom_object_id'] = $custom_object_id;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title title
     *
     * @return self
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string|null
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string|null $note note
     *
     * @return self
     */
    public function setNote($note)
    {
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string|null
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string|null $location location
     *
     * @return self
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets location_address
     *
     * @return \Apideck\Client\Model\Address|null
     */
    public function getLocationAddress()
    {
        return $this->container['location_address'];
    }

    /**
     * Sets location_address
     *
     * @param \Apideck\Client\Model\Address|null $location_address location_address
     *
     * @return self
     */
    public function setLocationAddress($location_address)
    {
        $this->container['location_address'] = $location_address;

        return $this;
    }

    /**
     * Gets all_day_event
     *
     * @return bool|null
     */
    public function getAllDayEvent()
    {
        return $this->container['all_day_event'];
    }

    /**
     * Sets all_day_event
     *
     * @param bool|null $all_day_event all_day_event
     *
     * @return self
     */
    public function setAllDayEvent($all_day_event)
    {
        $this->container['all_day_event'] = $all_day_event;

        return $this;
    }

    /**
     * Gets private
     *
     * @return bool|null
     */
    public function getPrivate()
    {
        return $this->container['private'];
    }

    /**
     * Sets private
     *
     * @param bool|null $private private
     *
     * @return self
     */
    public function setPrivate($private)
    {
        $this->container['private'] = $private;

        return $this;
    }

    /**
     * Gets group_event
     *
     * @return bool|null
     */
    public function getGroupEvent()
    {
        return $this->container['group_event'];
    }

    /**
     * Sets group_event
     *
     * @param bool|null $group_event group_event
     *
     * @return self
     */
    public function setGroupEvent($group_event)
    {
        $this->container['group_event'] = $group_event;

        return $this;
    }

    /**
     * Gets event_sub_type
     *
     * @return string|null
     */
    public function getEventSubType()
    {
        return $this->container['event_sub_type'];
    }

    /**
     * Sets event_sub_type
     *
     * @param string|null $event_sub_type event_sub_type
     *
     * @return self
     */
    public function setEventSubType($event_sub_type)
    {
        $this->container['event_sub_type'] = $event_sub_type;

        return $this;
    }

    /**
     * Gets group_event_type
     *
     * @return string|null
     */
    public function getGroupEventType()
    {
        return $this->container['group_event_type'];
    }

    /**
     * Sets group_event_type
     *
     * @param string|null $group_event_type group_event_type
     *
     * @return self
     */
    public function setGroupEventType($group_event_type)
    {
        $this->container['group_event_type'] = $group_event_type;

        return $this;
    }

    /**
     * Gets child
     *
     * @return bool|null
     */
    public function getChild()
    {
        return $this->container['child'];
    }

    /**
     * Sets child
     *
     * @param bool|null $child child
     *
     * @return self
     */
    public function setChild($child)
    {
        $this->container['child'] = $child;

        return $this;
    }

    /**
     * Gets archived
     *
     * @return bool|null
     */
    public function getArchived()
    {
        return $this->container['archived'];
    }

    /**
     * Sets archived
     *
     * @param bool|null $archived archived
     *
     * @return self
     */
    public function setArchived($archived)
    {
        $this->container['archived'] = $archived;

        return $this;
    }

    /**
     * Gets deleted
     *
     * @return bool|null
     */
    public function getDeleted()
    {
        return $this->container['deleted'];
    }

    /**
     * Sets deleted
     *
     * @param bool|null $deleted deleted
     *
     * @return self
     */
    public function setDeleted($deleted)
    {
        $this->container['deleted'] = $deleted;

        return $this;
    }

    /**
     * Gets show_as
     *
     * @return string|null
     */
    public function getShowAs()
    {
        return $this->container['show_as'];
    }

    /**
     * Sets show_as
     *
     * @param string|null $show_as show_as
     *
     * @return self
     */
    public function setShowAs($show_as)
    {
        $allowedValues = $this->getShowAsAllowableValues();
        if (!is_null($show_as) && !in_array($show_as, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'show_as', must be one of '%s'",
                    $show_as,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['show_as'] = $show_as;

        return $this;
    }

    /**
     * Gets done
     *
     * @return bool|null
     */
    public function getDone()
    {
        return $this->container['done'];
    }

    /**
     * Sets done
     *
     * @param bool|null $done Whether the Activity is done or not
     *
     * @return self
     */
    public function setDone($done)
    {
        $this->container['done'] = $done;

        return $this;
    }

    /**
     * Gets start_datetime
     *
     * @return string|null
     */
    public function getStartDatetime()
    {
        return $this->container['start_datetime'];
    }

    /**
     * Sets start_datetime
     *
     * @param string|null $start_datetime start_datetime
     *
     * @return self
     */
    public function setStartDatetime($start_datetime)
    {
        $this->container['start_datetime'] = $start_datetime;

        return $this;
    }

    /**
     * Gets end_datetime
     *
     * @return string|null
     */
    public function getEndDatetime()
    {
        return $this->container['end_datetime'];
    }

    /**
     * Sets end_datetime
     *
     * @param string|null $end_datetime end_datetime
     *
     * @return self
     */
    public function setEndDatetime($end_datetime)
    {
        $this->container['end_datetime'] = $end_datetime;

        return $this;
    }

    /**
     * Gets duration_minutes
     *
     * @return int|null
     */
    public function getDurationMinutes()
    {
        return $this->container['duration_minutes'];
    }

    /**
     * Sets duration_minutes
     *
     * @param int|null $duration_minutes duration_minutes
     *
     * @return self
     */
    public function setDurationMinutes($duration_minutes)
    {
        $this->container['duration_minutes'] = $duration_minutes;

        return $this;
    }

    /**
     * Gets activity_date
     *
     * @return string|null
     */
    public function getActivityDate()
    {
        return $this->container['activity_date'];
    }

    /**
     * Sets activity_date
     *
     * @param string|null $activity_date activity_date
     *
     * @return self
     */
    public function setActivityDate($activity_date)
    {
        $this->container['activity_date'] = $activity_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return string|null
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param string|null $end_date end_date
     *
     * @return self
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets recurrent
     *
     * @return bool|null
     */
    public function getRecurrent()
    {
        return $this->container['recurrent'];
    }

    /**
     * Sets recurrent
     *
     * @param bool|null $recurrent recurrent
     *
     * @return self
     */
    public function setRecurrent($recurrent)
    {
        $this->container['recurrent'] = $recurrent;

        return $this;
    }

    /**
     * Gets reminder_datetime
     *
     * @return string|null
     */
    public function getReminderDatetime()
    {
        return $this->container['reminder_datetime'];
    }

    /**
     * Sets reminder_datetime
     *
     * @param string|null $reminder_datetime reminder_datetime
     *
     * @return self
     */
    public function setReminderDatetime($reminder_datetime)
    {
        $this->container['reminder_datetime'] = $reminder_datetime;

        return $this;
    }

    /**
     * Gets reminder_set
     *
     * @return bool|null
     */
    public function getReminderSet()
    {
        return $this->container['reminder_set'];
    }

    /**
     * Sets reminder_set
     *
     * @param bool|null $reminder_set reminder_set
     *
     * @return self
     */
    public function setReminderSet($reminder_set)
    {
        $this->container['reminder_set'] = $reminder_set;

        return $this;
    }

    /**
     * Gets video_conference_url
     *
     * @return string|null
     */
    public function getVideoConferenceUrl()
    {
        return $this->container['video_conference_url'];
    }

    /**
     * Sets video_conference_url
     *
     * @param string|null $video_conference_url video_conference_url
     *
     * @return self
     */
    public function setVideoConferenceUrl($video_conference_url)
    {
        $this->container['video_conference_url'] = $video_conference_url;

        return $this;
    }

    /**
     * Gets video_conference_id
     *
     * @return string|null
     */
    public function getVideoConferenceId()
    {
        return $this->container['video_conference_id'];
    }

    /**
     * Sets video_conference_id
     *
     * @param string|null $video_conference_id video_conference_id
     *
     * @return self
     */
    public function setVideoConferenceId($video_conference_id)
    {
        $this->container['video_conference_id'] = $video_conference_id;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return \Apideck\Client\Model\CustomField[]|null
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param \Apideck\Client\Model\CustomField[]|null $custom_fields custom_fields
     *
     * @return self
     */
    public function setCustomFields($custom_fields)
    {
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }

    /**
     * Gets attendees
     *
     * @return \Apideck\Client\Model\ActivityAttendee[]|null
     */
    public function getAttendees()
    {
        return $this->container['attendees'];
    }

    /**
     * Sets attendees
     *
     * @param \Apideck\Client\Model\ActivityAttendee[]|null $attendees attendees
     *
     * @return self
     */
    public function setAttendees($attendees)
    {
        $this->container['attendees'] = $attendees;

        return $this;
    }

    /**
     * Gets updated_by
     *
     * @return string|null
     */
    public function getUpdatedBy()
    {
        return $this->container['updated_by'];
    }

    /**
     * Sets updated_by
     *
     * @param string|null $updated_by updated_by
     *
     * @return self
     */
    public function setUpdatedBy($updated_by)
    {
        $this->container['updated_by'] = $updated_by;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return string|null
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param string|null $created_by created_by
     *
     * @return self
     */
    public function setCreatedBy($created_by)
    {
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string|null $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string|null $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


