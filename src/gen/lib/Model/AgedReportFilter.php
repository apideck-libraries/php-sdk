<?php
/**
 * AgedReportFilter
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Apideck\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Apideck
 *
 * The Apideck OpenAPI Spec: SDK Optimized
 *
 * The version of the OpenAPI document: 10.9.0
 * Contact: support@apideck.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Apideck\Client\Model;

use \ArrayAccess;
use \Apideck\Client\ObjectSerializer;

/**
 * AgedReportFilter Class Doc Comment
 *
 * @category Class
 * @package  Apideck\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class AgedReportFilter implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AgedReportFilter';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'customer_id' => 'string',
        'report_as_of_date' => 'string',
        'period_count' => 'int',
        'period_length' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'customer_id' => null,
        'report_as_of_date' => null,
        'period_count' => null,
        'period_length' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'customer_id' => 'customer_id',
        'report_as_of_date' => 'report_as_of_date',
        'period_count' => 'period_count',
        'period_length' => 'period_length'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'customer_id' => 'setCustomerId',
        'report_as_of_date' => 'setReportAsOfDate',
        'period_count' => 'setPeriodCount',
        'period_length' => 'setPeriodLength'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'customer_id' => 'getCustomerId',
        'report_as_of_date' => 'getReportAsOfDate',
        'period_count' => 'getPeriodCount',
        'period_length' => 'getPeriodLength'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['customer_id'] = $data['customer_id'] ?? null;
        $this->container['report_as_of_date'] = $data['report_as_of_date'] ?? null;
        $this->container['period_count'] = $data['period_count'] ?? null;
        $this->container['period_length'] = $data['period_length'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['period_count']) && ($this->container['period_count'] > 12)) {
            $invalidProperties[] = "invalid value for 'period_count', must be smaller than or equal to 12.";
        }

        if (!is_null($this->container['period_count']) && ($this->container['period_count'] < 1)) {
            $invalidProperties[] = "invalid value for 'period_count', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['period_length']) && ($this->container['period_length'] > 365)) {
            $invalidProperties[] = "invalid value for 'period_length', must be smaller than or equal to 365.";
        }

        if (!is_null($this->container['period_length']) && ($this->container['period_length'] < 1)) {
            $invalidProperties[] = "invalid value for 'period_length', must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets customer_id
     *
     * @return string|null
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param string|null $customer_id Filter by customer id
     *
     * @return self
     */
    public function setCustomerId($customer_id)
    {
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets report_as_of_date
     *
     * @return string|null
     */
    public function getReportAsOfDate()
    {
        return $this->container['report_as_of_date'];
    }

    /**
     * Sets report_as_of_date
     *
     * @param string|null $report_as_of_date The cutoff date for considering transactions
     *
     * @return self
     */
    public function setReportAsOfDate($report_as_of_date)
    {
        $this->container['report_as_of_date'] = $report_as_of_date;

        return $this;
    }

    /**
     * Gets period_count
     *
     * @return int|null
     */
    public function getPeriodCount()
    {
        return $this->container['period_count'];
    }

    /**
     * Sets period_count
     *
     * @param int|null $period_count Number of periods to split the aged creditors report into
     *
     * @return self
     */
    public function setPeriodCount($period_count)
    {

        if (!is_null($period_count) && ($period_count > 12)) {
            throw new \InvalidArgumentException('invalid value for $period_count when calling AgedReportFilter., must be smaller than or equal to 12.');
        }
        if (!is_null($period_count) && ($period_count < 1)) {
            throw new \InvalidArgumentException('invalid value for $period_count when calling AgedReportFilter., must be bigger than or equal to 1.');
        }

        $this->container['period_count'] = $period_count;

        return $this;
    }

    /**
     * Gets period_length
     *
     * @return int|null
     */
    public function getPeriodLength()
    {
        return $this->container['period_length'];
    }

    /**
     * Sets period_length
     *
     * @param int|null $period_length Length of each period in days
     *
     * @return self
     */
    public function setPeriodLength($period_length)
    {

        if (!is_null($period_length) && ($period_length > 365)) {
            throw new \InvalidArgumentException('invalid value for $period_length when calling AgedReportFilter., must be smaller than or equal to 365.');
        }
        if (!is_null($period_length) && ($period_length < 1)) {
            throw new \InvalidArgumentException('invalid value for $period_length when calling AgedReportFilter., must be bigger than or equal to 1.');
        }

        $this->container['period_length'] = $period_length;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


